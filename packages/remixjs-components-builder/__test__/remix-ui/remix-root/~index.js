import { transports } from 'remixjs/project';


Component({
  options: { addGlobalClass: true },

  properties: {
    onTouchStart: String,
		onTouchMove: String,
		onTouchCancel: String,
		onTouchEnd: String,
		onTap: String,
		onLongPress: String,
		onLongTap: String,
		onTouchForceChange: String,
		onTransitionEnd: String,
		onAnimationStart: String,
		onAnimationIteration: String,
		onAnimationEnd: String,
		child: Object,
		uuid: String,
		
  },

  data: {
    onTouchStart: null,
		onTouchMove: null,
		onTouchCancel: null,
		onTouchEnd: null,
		onTap: null,
		onLongPress: null,
		onLongTap: null,
		onTouchForceChange: null,
		onTransitionEnd: null,
		onAnimationStart: null,
		onAnimationIteration: null,
		onAnimationEnd: null,
		child: null,
		uuid: null,
		
  },

  methods: {
    postMessage (data) { this.setData(data) },
    // others component event
    onGetUserInfo(e) { transports.view.dispatch('onGetUserInfo', e.target.id, this.data.parent, e, this) },
    onContact(e) { transports.view.dispatch('onContact', e.target.id, this.data.parent, e, this) },
    onGetPhoneNumber(e) { transports.view.dispatch('onGetPhoneNumber', e.target.id, this.data.parent, e, this) },
    onOpenSetting(e) { transports.view.dispatch('onOpenSetting', e.target.id, this.data.parent, e, this) },
    onLaunchApp(e) { transports.view.dispatch('onLaunchApp', e.target.id, this.data.parent, e, this) },
    onError(e) { transports.view.dispatch('onError', e.target.id, this.data.parent, e, this) },
    onLoad(e) { transports.view.dispatch('onLoad', e.target.id, this.data.parent, e, this) },
    onInput(e) { transports.view.dispatch('onInput', e.target.id, this.data.parent, e, this) },
    onFocus(e) { transports.view.dispatch('onFocus', e.target.id, this.data.parent, e, this) },
    onBlur(e) { transports.view.dispatch('onBlur', e.target.id, this.data.parent, e, this) },
    onConfirm(e) { transports.view.dispatch('onConfirm', e.target.id, this.data.parent, e, this) },
    onKeyboardHeightChange(e) { transports.view.dispatch('onKeyboardHeightChange', e.target.id, this.data.parent, e, this) },
    onMarkerTap(e) { transports.view.dispatch('onMarkerTap', e.target.id, this.data.parent, e, this) },
    onLabelTap(e) { transports.view.dispatch('onLabelTap', e.target.id, this.data.parent, e, this) },
    onControlTap(e) { transports.view.dispatch('onControlTap', e.target.id, this.data.parent, e, this) },
    onCalloutTap(e) { transports.view.dispatch('onCalloutTap', e.target.id, this.data.parent, e, this) },
    onUpdated(e) { transports.view.dispatch('onUpdated', e.target.id, this.data.parent, e, this) },
    onRegionChange(e) { transports.view.dispatch('onRegionChange', e.target.id, this.data.parent, e, this) },
    onCancel(e) { transports.view.dispatch('onCancel', e.target.id, this.data.parent, e, this) },
    onColumnChange(e) { transports.view.dispatch('onColumnChange', e.target.id, this.data.parent, e, this) },
    onScrollToUpper(e) { transports.view.dispatch('onScrollToUpper', e.target.id, this.data.parent, e, this) },
    onScrollToLower(e) { transports.view.dispatch('onScrollToLower', e.target.id, this.data.parent, e, this) },
    onScroll(e) { transports.view.dispatch('onScroll', e.target.id, this.data.parent, e, this) },
    onAnimationFinish(e) { transports.view.dispatch('onAnimationFinish', e.target.id, this.data.parent, e, this) },
    onPlay(e) { transports.view.dispatch('onPlay', e.target.id, this.data.parent, e, this) },
    onPause(e) { transports.view.dispatch('onPause', e.target.id, this.data.parent, e, this) },
    onEnded(e) { transports.view.dispatch('onEnded', e.target.id, this.data.parent, e, this) },
    onTimeUpdate(e) { transports.view.dispatch('onTimeUpdate', e.target.id, this.data.parent, e, this) },
    onFullScreenChange(e) { transports.view.dispatch('onFullScreenChange', e.target.id, this.data.parent, e, this) },
    onWaiting(e) { transports.view.dispatch('onWaiting', e.target.id, this.data.parent, e, this) },
    onProgress(e) { transports.view.dispatch('onProgress', e.target.id, this.data.parent, e, this) },
    onLoadedMetaData(e) { transports.view.dispatch('onTimeUpdate', e.target.id, this.data.parent, e, this) },
    onTouchStart (e) { transports.view.dispatch('onTouchStart', this.data.uuid, this.data.parent, e); },
		onTouchMove (e) { transports.view.dispatch('onTouchMove', this.data.uuid, this.data.parent, e); },
		onTouchCancel (e) { transports.view.dispatch('onTouchCancel', this.data.uuid, this.data.parent, e); },
		onTouchEnd (e) { transports.view.dispatch('onTouchEnd', this.data.uuid, this.data.parent, e); },
		onTap (e) { transports.view.dispatch('onTap', this.data.uuid, this.data.parent, e); },
		onLongPress (e) { transports.view.dispatch('onLongPress', this.data.uuid, this.data.parent, e); },
		onLongTap (e) { transports.view.dispatch('onLongTap', this.data.uuid, this.data.parent, e); },
		onTouchForceChange (e) { transports.view.dispatch('onTouchForceChange', this.data.uuid, this.data.parent, e); },
		onTransitionEnd (e) { transports.view.dispatch('onTransitionEnd', this.data.uuid, this.data.parent, e); },
		onAnimationStart (e) { transports.view.dispatch('onAnimationStart', this.data.uuid, this.data.parent, e); },
		onAnimationIteration (e) { transports.view.dispatch('onAnimationIteration', this.data.uuid, this.data.parent, e); },
		onAnimationEnd (e) { transports.view.dispatch('onAnimationEnd', this.data.uuid, this.data.parent, e); }
  },

  lifetimes: {
    created () { transports.view.callLifecycle('created', this.data.uuid, this.data.parent, this); },
    attached () { transports.view.callLifecycle('attached', this.data.uuid, this.data.parent, this); },
    detached () { transports.view.callLifecycle('detached', this.data.uuid, this.data.parent, this); },
    ready () { transports.view.callLifecycle('ready', this.data.uuid, this.data.parent, this); },
    moved () { transports.view.callLifecycle('moved', this.data.uuid, this.data.parent, this); },
    error (error) { transports.view.callLifecycle('detached', this.data.uuid, this.data.parent, error, this); }
  },
});
